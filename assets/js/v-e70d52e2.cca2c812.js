"use strict";(self.webpackChunkblog_vue_press=self.webpackChunkblog_vue_press||[]).push([[780],{1878:(e,a,r)=>{r.r(a),r.d(a,{data:()=>t});const t={key:"v-e70d52e2",path:"/%E5%85%B6%E4%BB%96/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是接口幂等",slug:"什么是接口幂等",children:[]},{level:2,title:"什么场景需要幂等",slug:"什么场景需要幂等",children:[]},{level:2,title:"如何实现",slug:"如何实现",children:[{level:3,title:"请求序列号",slug:"请求序列号",children:[]},{level:3,title:"唯一索引",slug:"唯一索引",children:[]},{level:3,title:"upsert",slug:"upsert",children:[]}]}],filePathRelative:"其他/接口幂等.md",git:{updatedTime:1637768993e3,contributors:[{name:"liujunjia",email:"43411944+liujunjia1996@users.noreply.github.com",commits:1}]}}},6940:(e,a,r)=>{r.r(a),r.d(a,{default:()=>h});const t=(0,r(6252).uE)('<h2 id="什么是接口幂等" tabindex="-1"><a class="header-anchor" href="#什么是接口幂等" aria-hidden="true">#</a> 什么是接口幂等</h2><p>以相同的请求调用同一接口一次和多次，对系统产生的影响是相同的</p><h2 id="什么场景需要幂等" tabindex="-1"><a class="header-anchor" href="#什么场景需要幂等" aria-hidden="true">#</a> 什么场景需要幂等</h2><p>删、改、查天生幂等，增加操作需要</p><h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现" aria-hidden="true">#</a> 如何实现</h2><h3 id="请求序列号" tabindex="-1"><a class="header-anchor" href="#请求序列号" aria-hidden="true">#</a> 请求序列号</h3><p>每个请求前端带一个 uuid，后端放入缓存，入库前判断请求序列号是否已经在缓存中了，如果没有才处理。</p><h3 id="唯一索引" tabindex="-1"><a class="header-anchor" href="#唯一索引" aria-hidden="true">#</a> 唯一索引</h3><p>建立唯一索引，重复后会报错给前端，前端提示用户刷新</p><h3 id="upsert" tabindex="-1"><a class="header-anchor" href="#upsert" aria-hidden="true">#</a> upsert</h3><p>mongodb 有一个原子的 upsert 命令，可能有幂等问题的接口可以使用 upsert ，无则插入，有则更新，重复执行了也不会有问题。</p><p>ps：幂等问题前端也可以通过提交前不允许再次点击按钮来尽量避免</p>',12),i={},h=(0,r(3744).Z)(i,[["render",function(e,a){return t}]])},3744:(e,a)=>{a.Z=(e,a)=>{const r=e.__vccOpts||e;for(const[e,t]of a)r[e]=t;return r}}}]);