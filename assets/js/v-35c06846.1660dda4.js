"use strict";(self.webpackChunkblog_vue_press=self.webpackChunkblog_vue_press||[]).push([[68],{6431:(a,e,t)=>{t.r(e),t.d(e,{data:()=>r});const r={key:"v-35c06846",path:"/plan/%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E8%BF%AD%E4%BB%A3.html",title:"分析",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"表结构",slug:"表结构",children:[]},{level:3,title:"采集端改造",slug:"采集端改造",children:[]},{level:3,title:"运营端改造",slug:"运营端改造",children:[]}],filePathRelative:"plan/操作日志迭代.md",git:{updatedTime:1638498729e3,contributors:[{name:"liujunjia",email:"43411944+liujunjia1996@users.noreply.github.com",commits:1}]}}},5947:(a,e,t)=>{t.r(e),t.d(e,{default:()=>p});const r=(0,t(6252).uE)('<h1 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h1><p>近期操作日志平台，在特定情况下出现查询性能问题，一些简单的查询都会得到 504（网关超时）错误。</p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/57d5eb1c5f42461b801a427b36d0474d.png" alt="img"></p><p>于是对操作现状进行一些调查：</p><p>先看<strong>整体</strong>，半年来，操作日志大概写入不到 800g，文档总数为 600w。</p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/18a4d3085e724cd5ac91b85e7230eb13.png" alt="img"></p><p>对比其它业务，发现，同样文档数量的库的大小和操作日志差了好几个数量级：</p><ul><li>这两个库，500w 文档，大小 1G+</li></ul><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/6bf4a0871b864d79987fc8d7e1e6cb65.png" alt="img"></p><ul><li>这个库，2000w 文档，大小 52G+</li></ul><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/22eddc8fa16f451c9ff85908ccc88156.png" alt="img"></p><p>这就说明操作日志的单条记录很大。</p><p>再看<strong>操作日志库内部</strong>：</p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/0d3e6633d08a4e628652c0105c143bb7.png" alt="img"></p><p>虽然一共接入了 18 个业务，但是，单单 ota 业务就写了快 700G，占用了 <strong>87%</strong> 的存储空间。</p><p>最后再看<strong>单条纪录</strong></p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/a876d6f0f5984f769fb24a2b3a99bb81.png" alt="img"></p><p>导致操作日志数据库体积如此之大的原因就是上面红框中的这两个字段，它们记录了某次操作前后，中台制品数据的快照，这个制品数据每个业务大小不一。</p><p>对于 ota 来讲，这个制品数据极大，基本都是上千行的：</p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/bf49aae52d2f4bc3a7c6acb6baf7710c.png" alt="img"></p><p>交互上，每次查询的结果都是按照 <code>createdTime</code> 从大到小排序的。也就是说，对于操作日志这个服务，排序的行为是非常高频的。</p><p>由于单行的数据过大，导致排序性能过差，最终导致查询超时。</p><ul><li>不走索引，最慢</li><li>走索引，需要排序，比较慢</li><li>走索引，无需排序，快</li></ul><blockquote><p>ps: mongo 的查询和 mysql 还是有些许不一样</p><ol><li><p>查询默认会返回 id 字段，除非显式指定不要 id 字段</p></li><li><p>联合索引用来回表的键不是 id，而是隐藏字段 rowId</p></li></ol><p>所以使用联合索引优化时，要么 id 在联合索引中存在，要么查询时显式指定不返回 id ，不然都会回表</p></blockquote><p>之前通过一些联合索引的创建只是间接解决这个问题（查询条件关联上 createTime 以避免排序），但是，还是有查询条件走不上索引，想要根本解决问题，还是需要从表结构下手。</p><h1 id="方案" tabindex="-1"><a class="header-anchor" href="#方案" aria-hidden="true">#</a> 方案</h1><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/5383be53ce684b46818807ae061397da.png" alt="img"></p><h3 id="表结构" tabindex="-1"><a class="header-anchor" href="#表结构" aria-hidden="true">#</a> 表结构</h3><p>新增一张详情表，表名为 biz_detail</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>_id</td><td>主键，自动分配</td></tr><tr><td>operationId</td><td>操作 id，暂时没什么用,</td></tr><tr><td>createdTime</td><td>插入的时间，删除时可能会用到</td></tr><tr><td>lastArtifactContent</td><td>操作前制品内容（大字段）</td></tr><tr><td>artifactContent</td><td>操作后制品内容 （大字段）</td></tr></tbody></table><h3 id="采集端改造" tabindex="-1"><a class="header-anchor" href="#采集端改造" aria-hidden="true">#</a> 采集端改造</h3><p>维护一个分表业务列表，对于在列表中的业务写入时，将 <code>操作前后的制品内容</code> 这两个字段，存到后缀为详情的表中。</p><p>改造后，采集端的整体流程为：</p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/ae4134024da246ed879f71a193c01ba3.jpg" alt="img" style="width:400px;"><p>因为将操作前后的制品内容分表存了，高级查询依赖这两个字段，所以对于分表的业务交互上的高级查询不能用了。</p><p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/af9f78d99038497c86a82cc4ed4e81a3.png" alt="img"></p><p>所以为了降低没有高级查询的影响，body 表里添加两个字段：<code>rid</code>，<code>artifactRowId</code></p><h3 id="运营端改造" tabindex="-1"><a class="header-anchor" href="#运营端改造" aria-hidden="true">#</a> 运营端改造</h3><p>因为采集端表结构有了变化，运营端也应相应改造。</p><h4 id="查询详情" tabindex="-1"><a class="header-anchor" href="#查询详情" aria-hidden="true">#</a> 查询详情</h4><p>如果是分表业务需要从详情表再查一次。</p><img src="http://s3v2-qos.storage.wanyol.com/guass-cloud-storage-provider/wallpaper/21/08/02/172b66fe0eb14da5b8ac2e6513876879.jpg" alt="img" style="zoom:60%;"><h4 id="查询列表" tabindex="-1"><a class="header-anchor" href="#查询列表" aria-hidden="true">#</a> 查询列表</h4><p>列表查询没有变化。</p><h4 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务" aria-hidden="true">#</a> 定时任务</h4><p>需要增加对详情表的过期删除处理。</p>',46),d={},p=(0,t(3744).Z)(d,[["render",function(a,e){return r}]])},3744:(a,e)=>{e.Z=(a,e)=>{const t=a.__vccOpts||a;for(const[a,r]of e)t[a]=r;return t}}}]);