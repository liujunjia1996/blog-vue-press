"use strict";(self.webpackChunkblog_vue_press=self.webpackChunkblog_vue_press||[]).push([[756],{9729:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-264bc4b2",path:"/JDK/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%20interruptExp.html",title:"背景",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"JDK/如何处理 interruptExp.md",git:{updatedTime:1637336098e3,contributors:[{name:"liujunjia",email:"43411944+liujunjia1996@users.noreply.github.com",commits:1}]}}},1471:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(6252);const p=(0,t.uE)('<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h1><p>我在编写一个 sdk 时，封装了一个用于发 mq 的方法。</p><p>这个方法不属于业务的主逻辑，失败了也无所谓，所以不希望这个方法抛给业务任何异常而导致业务不可用。</p><p>因此封装这个方法时我写了这样的代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n  <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送出错&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这时我得到了一个 sonar-lint 的警告：</p><blockquote><p>Either re-interrupt this method or rethrow the “InterruptedException”</p></blockquote><p>这个 interruptedException 有什么特别之处吗，为啥别的异常都能直接 catch 就完事，它非要报警告?</p><h1 id="线程的-interrupt-方法" tabindex="-1"><a class="header-anchor" href="#线程的-interrupt-方法" aria-hidden="true">#</a> 线程的 interrupt 方法</h1><p>可以使线程的中断标志位 true，但是不会对线程产生实质影响，线程可以通过 <code>isInterrupted()</code>查询中断状态并自行响应</p><h1 id="什么是-interruptexception" tabindex="-1"><a class="header-anchor" href="#什么是-interruptexception" aria-hidden="true">#</a> 什么是 interruptException</h1><p>线程在执行 sleep 或 join 等阻塞方法时，对其调用 xxxThread.interrupt() 时产生</p><h1 id="两种处理方式" tabindex="-1"><a class="header-anchor" href="#两种处理方式" aria-hidden="true">#</a> 两种处理方式</h1><ol><li>往上抛</li><li>忽略，手动设置线程的中断状态</li></ol><p>根据我的使用场景，选择了第二种方式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n  <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;中断异常&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 这里再次调用 interrupt 是为了让堆栈中更深的方法也能感知到这个异常</span>\n  <span class="token comment">// 不然它们根本不知道有中断发生，更不用谈处理了</span>\n  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送出错&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',16),e=(0,t.Uk)("最后，"),c={href:"https://www.jianshu.com/p/a8abe097d4ed",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("这篇"),u=(0,t.Uk)("关于 interruptException 的文章写的也很好，mark 一下"),r={},l=(0,a(3744).Z)(r,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",c,[o,(0,t.Wm)(a)]),u])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);