"use strict";(self.webpackChunkblog_vue_press=self.webpackChunkblog_vue_press||[]).push([[1911],{1232:(e,a,i)=>{i.r(a),i.d(a,{data:()=>l});const l={key:"v-30757826",path:"/db/mysql%20%E6%80%BB%E7%BB%93.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"mysql 江湖地位",slug:"mysql-江湖地位",children:[]},{level:2,title:"为什么是b+🌲而不是二叉树 b 树 红黑树 hash",slug:"为什么是b-🌲而不是二叉树-b-树-红黑树-hash",children:[]},{level:2,title:"b 树和 b+ 树的区别",slug:"b-树和-b-树的区别",children:[]},{level:2,title:"二级索引树的内节点都存储哪些信息，有没有存主键 id，如果存了，理由是什么？",slug:"二级索引树的内节点都存储哪些信息-有没有存主键-id-如果存了-理由是什么",children:[]},{level:2,title:"UUID 为什么不能做索引",slug:"uuid-为什么不能做索引",children:[]},{level:2,title:"三层的树大概能存多少条数据",slug:"三层的树大概能存多少条数据",children:[]},{level:2,title:"什么情况会导致走不上索引",slug:"什么情况会导致走不上索引",children:[]},{level:2,title:"建库或建表时字符集指定为 utf8 和 utf8mb4 有什么区别",slug:"建库或建表时字符集指定为-utf8-和-utf8mb4-有什么区别",children:[]},{level:2,title:"聚集索引，非聚集索引",slug:"聚集索引-非聚集索引",children:[]},{level:2,title:"事务特点",slug:"事务特点",children:[]},{level:2,title:"隔离级别",slug:"隔离级别",children:[]},{level:2,title:"表设计三范式",slug:"表设计三范式",children:[]},{level:2,title:"数据库引擎是库级别还是表级",slug:"数据库引擎是库级别还是表级",children:[]},{level:2,title:"什么是索引下推",slug:"什么是索引下推",children:[]},{level:2,title:"什么是 MRR",slug:"什么是-mrr",children:[]},{level:2,title:"explain 解释，执行成本",slug:"explain-解释-执行成本",children:[]},{level:2,title:"延迟关联优化",slug:"延迟关联优化",children:[]},{level:2,title:"水平分表和垂直分表",slug:"水平分表和垂直分表",children:[]},{level:2,title:"数据库分布式 id 方案",slug:"数据库分布式-id-方案",children:[]},{level:2,title:"mysql 查询时区分大小写吗",slug:"mysql-查询时区分大小写吗",children:[]},{level:2,title:"什么是 redolog undolog binlog",slug:"什么是-redolog-undolog-binlog",children:[]},{level:2,title:"mvcc",slug:"mvcc",children:[]},{level:2,title:"mysql 中的锁",slug:"mysql-中的锁",children:[]}],filePathRelative:"db/mysql 总结.md",git:{updatedTime:1638498729e3,contributors:[{name:"liujunjia",email:"43411944+liujunjia1996@users.noreply.github.com",commits:1}]}}},2153:(e,a,i)=>{i.r(a),i.d(a,{default:()=>r});const l=(0,i(6252).uE)('<h2 id="mysql-江湖地位" tabindex="-1"><a class="header-anchor" href="#mysql-江湖地位" aria-hidden="true">#</a> mysql 江湖地位</h2><p><img src="https://user-images.githubusercontent.com/43411944/139579867-ddfa4594-0133-4c39-bf44-8b6df20b5ee0.png" alt="image"></p><h2 id="为什么是b-🌲而不是二叉树-b-树-红黑树-hash" tabindex="-1"><a class="header-anchor" href="#为什么是b-🌲而不是二叉树-b-树-红黑树-hash" aria-hidden="true">#</a> 为什么是b+🌲而不是二叉树 b 树 红黑树 hash</h2><p>二叉树容易退化，红黑树、b 树太高，hash 范围查找不合适</p><h2 id="b-树和-b-树的区别" tabindex="-1"><a class="header-anchor" href="#b-树和-b-树的区别" aria-hidden="true">#</a> b 树和 b+ 树的区别</h2><p>b + 树只有叶子节点放数据，而 b 树所有节点都可以放数据，这样 b+ 树可以放更多的索引，树更矮<br> b + 叶子节点同时也是一个有序链表，做全表扫描或范围查找时仅需遍历这个链表即可，比较方便</p><h2 id="二级索引树的内节点都存储哪些信息-有没有存主键-id-如果存了-理由是什么" tabindex="-1"><a class="header-anchor" href="#二级索引树的内节点都存储哪些信息-有没有存主键-id-如果存了-理由是什么" aria-hidden="true">#</a> 二级索引树的内节点都存储哪些信息，有没有存主键 id，如果存了，理由是什么？</h2><p>存主键 id 了，因为内节点必须是有序排列的，当二级索引的值相同时可以用 id 排序。另外，如果是唯一二级索引，也是需要存主键 id 的，因为唯一二级索引可以存多个 null。</p><h2 id="uuid-为什么不能做索引" tabindex="-1"><a class="header-anchor" href="#uuid-为什么不能做索引" aria-hidden="true">#</a> UUID 为什么不能做索引</h2><p>长度太长，正常 int 4 b，bigint 8 b，但是 uuid 是 32 位字符串即 32 b，一个 uuid 索引占用空间是 int 的 8 倍，是 bigInt 的 4 倍，这会导致二分查找遍历的页增多，甚至可能导致 b+ 树的层高变高，并且，每个二级索引都会存储主键 id 用于回表，如果主键太长，整个表的其他索引也会被拖慢 没有顺序，会将顺序写变为随机写，产生多余的页分裂，多余的页缓存失效处理 比较时性能不佳，字符串比大小要先查码表再比较，整形直接就比较了</p><h2 id="三层的树大概能存多少条数据" tabindex="-1"><a class="header-anchor" href="#三层的树大概能存多少条数据" aria-hidden="true">#</a> 三层的树大概能存多少条数据</h2><p>千万级，至于几千万要看具体情况；<br> 假设所有存放用户记录的叶子节点代表的数据页可以存放 100 条用户记录，所有存放目录项记录的内节点代表的数据页可以存放 1000 条目录项记录（这种假设每行大概只有 160 个字节，单行内容较少），那么： 如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放100条记录。 如果B+树有2层，最多能存放 1000×100=100000 条记录。 如果B+树有3层，最多能存放 1000×1000×100=100000000 条记录，一亿。 如果B+树有4层，最多能存放 1000×1000×1000×100=100000000000 条记录。</p><h2 id="什么情况会导致走不上索引" tabindex="-1"><a class="header-anchor" href="#什么情况会导致走不上索引" aria-hidden="true">#</a> 什么情况会导致走不上索引</h2><p>不符合最左前缀原则<br> where 条件使用了函数或进行了计算，WHERE <code>age</code>+10=30 或者 concat(<code>aaa</code>,&#39;abc&#39;) =&#39;111abc&#39;<br> 还要小心隐式类型转换，WHERE <code>a</code>=1</p><h2 id="建库或建表时字符集指定为-utf8-和-utf8mb4-有什么区别" tabindex="-1"><a class="header-anchor" href="#建库或建表时字符集指定为-utf8-和-utf8mb4-有什么区别" aria-hidden="true">#</a> 建库或建表时字符集指定为 utf8 和 utf8mb4 有什么区别</h2><p>mysql 的 utf8 是 utf8mb3 的缩写，最多只能用三个字节表示一个字符，是残缺的，开发时应指定字符集为 utf8mb4。<br> mysql8.0 后，默认字符集已被修正为 utf8mb4</p><h2 id="聚集索引-非聚集索引" tabindex="-1"><a class="header-anchor" href="#聚集索引-非聚集索引" aria-hidden="true">#</a> 聚集索引，非聚集索引</h2><p>指 innodb 引擎，主键索引树的叶子节点里存储了所有字段数据的情况，不过 innodb 的二级索引 和 myisam 主键索引都是非聚集的</p><h2 id="事务特点" tabindex="-1"><a class="header-anchor" href="#事务特点" aria-hidden="true">#</a> 事务特点</h2><p>Atomicity：原子性，要么全部成功，要么全部失败<br> Consistency：一致性，事务前后从一个正确的状态转移到另一个正确的状态<br> Isolation：隔离性，两个事务之间不能互相影响<br> Durability：持久性，事务的修改要能一直保存</p><h2 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h2><p><img src="https://user-images.githubusercontent.com/43411944/139580643-d5d2abf9-a467-4bec-8b8f-9800c75ac214.png" alt="image"></p><h2 id="表设计三范式" tabindex="-1"><a class="header-anchor" href="#表设计三范式" aria-hidden="true">#</a> 表设计三范式</h2><p>每列保持原子性<br> 每列都与主键相关，一个表中只能保存一种数据<br> 每一列数据都和主键直接相关，而不是间接相关</p><h2 id="数据库引擎是库级别还是表级" tabindex="-1"><a class="header-anchor" href="#数据库引擎是库级别还是表级" aria-hidden="true">#</a> 数据库引擎是库级别还是表级</h2><p>表级别</p><h2 id="什么是索引下推" tabindex="-1"><a class="header-anchor" href="#什么是索引下推" aria-hidden="true">#</a> 什么是索引下推</h2><p>索引下推（index condition pushdown ）简称ICP，在Mysql5.6的版本上推出，用于优化查询。<br> 在不使用ICP的情况下，在使用非主键索引（又叫普通索引或者二级索引）进行查询时，存储引擎通过索引检索到数据，然后返回给MySQL服务器，服务器然后判断数据是否符合条件。<br> 在使用ICP的情况下，如果存在某些被索引的列的判断条件时，MySQL服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合MySQL服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给MySQL服务器。<br> 索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。</p><h2 id="什么是-mrr" tabindex="-1"><a class="header-anchor" href="#什么是-mrr" aria-hidden="true">#</a> 什么是 MRR</h2><p>MRR，全称「Multi-Range Read Optimization」。<br> 简单说：MRR 通过把「随机磁盘读」，转化为「顺序磁盘读」，从而提高了索引查询的性能。</p><h2 id="explain-解释-执行成本" tabindex="-1"><a class="header-anchor" href="#explain-解释-执行成本" aria-hidden="true">#</a> explain 解释，执行成本</h2><h2 id="延迟关联优化" tabindex="-1"><a class="header-anchor" href="#延迟关联优化" aria-hidden="true">#</a> 延迟关联优化</h2><p>mysql 深翻页的时候并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写：先快速定位需要的 id，然后再关联。</p><h2 id="水平分表和垂直分表" tabindex="-1"><a class="header-anchor" href="#水平分表和垂直分表" aria-hidden="true">#</a> 水平分表和垂直分表</h2><p>分行存，和分字段存</p><h2 id="数据库分布式-id-方案" tabindex="-1"><a class="header-anchor" href="#数据库分布式-id-方案" aria-hidden="true">#</a> 数据库分布式 id 方案</h2><p>雪花号</p><h2 id="mysql-查询时区分大小写吗" tabindex="-1"><a class="header-anchor" href="#mysql-查询时区分大小写吗" aria-hidden="true">#</a> mysql 查询时区分大小写吗</h2><p>库名表名分，字段名和字段值不分</p><h2 id="什么是-redolog-undolog-binlog" tabindex="-1"><a class="header-anchor" href="#什么是-redolog-undolog-binlog" aria-hidden="true">#</a> 什么是 redolog undolog binlog</h2><p>redolog 重做日志，宕机或断电重启时使用，保证事务 acid 中的 d<br> undolog 回滚日志，事务回滚和 mvcc 中使用，保证事务 acid 中的 a 和 i<br> binlog 同步日志，用来主从同步，可以通过订阅 binlog 实现一些特定功能</p><h2 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc" aria-hidden="true">#</a> mvcc</h2><h2 id="mysql-中的锁" tabindex="-1"><a class="header-anchor" href="#mysql-中的锁" aria-hidden="true">#</a> mysql 中的锁</h2>',43),d={},r=(0,i(3744).Z)(d,[["render",function(e,a){return l}]])},3744:(e,a)=>{a.Z=(e,a)=>{const i=e.__vccOpts||e;for(const[e,l]of a)i[e]=l;return i}}}]);