import{_ as t,o as e,c as d,d as a}from"./app.0a3e2f0c.js";const h={},c=a('<h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><h3 id="占用空间" tabindex="-1"><a class="header-anchor" href="#占用空间" aria-hidden="true">#</a> 占用空间</h3><table><thead><tr><th>类型</th><th>占据字节</th><th>表示形式</th></tr></thead><tbody><tr><td>datetime</td><td>8 字节</td><td>yyyy-mm-dd hh: mm: ss</td></tr><tr><td>timestamp</td><td>4 字节</td><td>yyyy-mm-dd hh: mm: ss</td></tr></tbody></table><h3 id="表示范围" tabindex="-1"><a class="header-anchor" href="#表示范围" aria-hidden="true">#</a> 表示范围</h3><table><thead><tr><th>类型</th><th>表示范围</th></tr></thead><tbody><tr><td>datetime</td><td>&#39;1000-01-01 00: 00: 00.000000&#39; to &#39;9999-12-31 23: 59: 59.999999&#39;</td></tr><tr><td>timestamp</td><td>&#39;1970-01-01 00: 00: 01.000000&#39; to &#39;2038-01-19 03: 14: 07.999999&#39;</td></tr></tbody></table><h3 id="时区" tabindex="-1"><a class="header-anchor" href="#时区" aria-hidden="true">#</a> 时区</h3><p><code>timestamp</code> 只占 4 个字节，而且是以 <code>utc</code> 的格式储存， 它会自动检索当前时区并进行转换。</p><p><code>datetime</code> 以 8 个字节储存，不会进行时区的检索。也就是说，对于 <code>timestamp</code> 来说，如果储存时的时区和检索时的时区不一样，那么拿出来的数据也不一样。对于 <code>datetime</code> 来说，存什么拿到的就是什么。</p><p>还有一个区别就是如果存进去的是 <code>NULL</code>，<code>timestamp</code> 会自动储存当前时间，而 <code>datetime</code> 会储存 <code>NULL</code>。</p><h2 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h2><p>虽然 <code>datetime</code> 8 bit ，但是一般来讲，不差这点空间，直接无脑 <code>datetime</code> 就好，不然的话还得处理时区问题，还要担心时间范围会不会超过 2038。</p>',11),o=[c];function r(i,m){return e(),d("div",null,o)}const n=t(h,[["render",r],["__file","datetime 和 timestamp 的区别.html.vue"]]);export{n as default};
